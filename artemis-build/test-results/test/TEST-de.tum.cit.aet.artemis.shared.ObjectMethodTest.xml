<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="de.tum.cit.aet.artemis.shared.ObjectMethodTest" tests="1850" skipped="0" failures="0" errors="0" timestamp="2025-02-14T23:46:20" hostname="fv-az1721-502" time="1.424">
  <properties/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.004"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.006"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ALL_OR_NOTHING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PROPORTIONAL_WITH_PENALTY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="PROPORTIONAL_WITHOUT_PENALTY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SYNCHRONIZED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BATCHED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INDIVIDUAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.004"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.006"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.004"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="START_NOW" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="END_NOW" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SET_VISIBLE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="OPEN_FOR_PRACTICE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="START_BATCH" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BUILD_FAILED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="PROGRESS_STALLED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="JOL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="TEXT_EXERCISE_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COURSE_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="COMPETENCY_GENERATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LECTURE_INGESTION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LECTURE_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FAQ_INGESTION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="GLOBAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COURSE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="USER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LLM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="ClassDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ObjectDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ActivityDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="UseCaseDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CommunicationDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ComponentDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DeploymentDiagram" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="PetriNet" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SyntaxTree" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="Flowchart" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="BPMN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="REMEMBER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="UNDERSTAND" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="APPLY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ANALYZE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EVALUATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CREATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.004"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ASSUMES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="EXTENDS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MATCHES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LECTURE__OPEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LECTURE__OPEN_UNIT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE__OPEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="NO_REASON" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RECENT_SCORES_LOWER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RECENT_SCORES_HIGHER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MORE_EASY_POINTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="MORE_HARD_POINTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="QUICKLY_SOLVED_EXERCISES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MORE_LOW_WEIGHTED_EXERCISES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MORE_HIGH_WEIGHTED_EXERCISES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PLAGIARISM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="POINT_DEDUCTION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="WARNING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NO_PLAGIARISM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONFIRMED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DENIED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NONE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUNNING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.006"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="MONDAY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUESDAY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="WEDNESDAY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="THURSDAY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FRIDAY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NOT_PARTICIPATED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="REVIEWED_INSTRUCTIONS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TRAINED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SELF_REGISTRATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INSTRUCTOR_REGISTRATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ACTIVE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CANCELLED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="UNINITIALIZED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="REPO_COPIED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="REPO_CONFIGURED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="INACTIVE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BUILD_PLAN_COPIED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BUILD_PLAN_CONFIGURED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INITIALIZED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FINISHED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TEXT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PROGRAMMING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MODELING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FILE_UPLOAD" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="QUIZ" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MANUAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TIMEOUT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TEST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="OTHER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INSTRUCTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXTERNAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ILLEGAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INDIVIDUAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="TEAM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EASY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MEDIUM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="HARD" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DIFFERENT_STUDENT_EXAMS_SAME_IP_ADDRESS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DIFFERENT_STUDENT_EXAMS_SAME_BROWSER_FINGERPRINT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SAME_STUDENT_EXAM_DIFFERENT_IP_ADDRESSES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SAME_STUDENT_EXAM_DIFFERENT_BROWSER_FINGERPRINTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="IP_ADDRESS_OUTSIDE_OF_RANGE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="IRIS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="ATHENA" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SUBMISSIONS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ACTIVE_USERS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="LOGGED_IN_USERS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RELEASED_EXERCISES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISES_DUE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="CONDUCTED_EXAMS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXAM_PARTICIPATIONS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="EXAM_REGISTRATIONS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="ACTIVE_TUTORS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CREATED_RESULTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="CREATED_FEEDBACKS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="POSTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="RESOLVED_POSTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ARTEMIS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COURSE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DIR_NOT_CREATED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NOTHING_TO_EXPORT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUNNING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED_WITH_WARNINGS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED_WITH_ERRORS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ID" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="TITLE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SHORT_NAME" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SEMESTER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="REQUESTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="IN_CREATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EMAIL_SENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DOWNLOADED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DOWNLOADED_DELETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DELETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FAILED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DAY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="WEEK" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MONTH" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="QUARTER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="YEAR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="STARTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FINISHED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ENGLISH" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="GERMAN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DISABLED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="COMMUNICATION_AND_MESSAGING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMMUNICATION_ONLY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ORPHANS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PLAGIARISM_COMPARISONS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NON_RATED_RESULTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RATED_RESULTS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="SUBMISSION_VERSIONS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FEEDBACK" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="PRIVACY_STATEMENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="IMPRINT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="AUTOMATIC" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SEMI_AUTOMATIC" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MANUAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="AUTOMATIC_ATHENA" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLAINT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MORE_FEEDBACK" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NONE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BONUS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GRADE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ALWAYS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="AFTER_DUE_DATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEVER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="INACTIVE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="FEEDBACK" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GRADED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MANUAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MANUAL_UNREFERENCED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="AUTOMATIC_ADAPTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="AUTOMATIC" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FILE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="URL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(String) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(String) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="AUTOMATIC" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MANUAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FIREBASE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="APNS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DEFAULT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="IOS_V2" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GENERAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LECTURE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="EXAM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FEEDBACK_DISCUSSION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INSTRUCTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="USER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PINNED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ARCHIVED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NONE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE_SUBMISSION_ASSESSED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ATTACHMENT_CHANGE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE_RELEASED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE_PRACTICE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="QUIZ_EXERCISE_STARTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXERCISE_UPDATED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_REPLY_FOR_EXERCISE_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_REPLY_FOR_LECTURE_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_REPLY_FOR_COURSE_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_REPLY_FOR_EXAM_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_EXERCISE_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_LECTURE_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_COURSE_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_ANNOUNCEMENT_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_EXAM_POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FILE_SUBMISSION_SUCCESSFUL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COURSE_ARCHIVE_STARTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COURSE_ARCHIVE_FINISHED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COURSE_ARCHIVE_FAILED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PROGRAMMING_TEST_CASES_CHANGED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DUPLICATE_TEST_CASE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXAM_ARCHIVE_STARTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EXAM_ARCHIVE_FINISHED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="EXAM_ARCHIVE_FAILED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ILLEGAL_SUBMISSION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_PLAGIARISM_CASE_STUDENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_CPC_PLAGIARISM_CASE_STUDENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PLAGIARISM_CASE_VERDICT_STUDENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="NEW_MANUAL_FEEDBACK_REQUEST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_REGISTRATION_STUDENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_DEREGISTRATION_STUDENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_REGISTRATION_TUTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_MULTIPLE_REGISTRATION_TUTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_DEREGISTRATION_TUTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="TUTORIAL_GROUP_DELETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_UPDATED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_ASSIGNED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TUTORIAL_GROUP_UNASSIGNED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_NEW_MESSAGE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_NEW_REPLY_MESSAGE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_USER_MENTIONED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_CREATE_ONE_TO_ONE_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_CREATE_GROUP_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_ADD_USER_GROUP_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_ADD_USER_CHANNEL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_REMOVE_USER_GROUP_CHAT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CONVERSATION_REMOVE_USER_CHANNEL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="CONVERSATION_DELETE_CHANNEL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DATA_EXPORT_CREATED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DATA_EXPORT_FAILED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PROGRAMMING_REPOSITORY_LOCKS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PROGRAMMING_BUILD_RUN_UPDATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.006"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="WARNING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INFO" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="IN_PROGRESS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ARCHIVED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="CHANNEL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DIRECT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="INSTRUCTOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="EDITOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TA" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="STUDENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="POST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ANSWER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TECH_SUPPORT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ORGANIZATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RANDOM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ANNOUNCEMENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CREATION_DATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="VOTES" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ANSWER_COUNT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="LOW" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MEDIUM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="HIGH" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ANNOUNCEMENT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ORGANIZATION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RANDOM" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TECH_SUPPORT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ACCEPTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="REJECTED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PROPOSED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUNNING" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="COMPLETED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SUCCESSFUL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FAILED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ERROR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="CANCELLED" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.005"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TEMPLATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SOLUTION" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.014"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.004"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(UserIdeMappingId) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PASSWORD" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PARTICIPATION_VCS_ACCESS_TOKEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="USER_VCS_ACCESS_TOKEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SSH" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CODE_EDITOR" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="VCS_ACCESS_TOKEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MAVEN_MAVEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PLAIN_MAVEN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PLAIN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="XCODE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FACT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GCC" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PLAIN_GRADLE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GRADLE_GRADLE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MAVEN_BLACKBOX" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CHECKSTYLE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GCC" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PMD" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="PMD_CPD" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUBOCOP" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUFF" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SPOTBUGS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SWIFTLINT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="OTHER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="STRUCTURAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BEHAVIORAL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DEFAULT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.002"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="JENKINS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="CLI" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="EMPTY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="JAVA" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PYTHON" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="C" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="HASKELL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="KOTLIN" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="VHDL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ASSEMBLER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SWIFT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="OCAML" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="JAVASCRIPT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="C_SHARP" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="C_PLUS_PLUS" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="SQL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="R" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="TYPESCRIPT" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUST" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="GO" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="MATLAB" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BASH" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="RUBY" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="POWERSHELL" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="ADA" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DART" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="PHP" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FILE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="FOLDER" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.003"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.001"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="toString() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(null) does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() does not throw exceptions" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="getId() and setId(Long) match each other" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="hashCode() for two instances with the same id is equal" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances without id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with the same id returns true" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="equals(Object) for two instances with different id returns false" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="DUE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <testcase name="BUILD_AND_TEST_AFTER_DUE_DATE" classname="de.tum.cit.aet.artemis.shared.ObjectMethodTest" time="0.0"/>
  <system-out><![CDATA[
Starting logs for TeamImportIntegrationTest

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListBadRequests()
    23:46:16.433 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:16.434 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:16.436 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:16.437 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:16.439 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:16.441 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 5 users from all courses...
    23:46:16.442 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 5 users from all courses. Done
    23:46:16.442 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:16.444 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:16.499 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListBadRequests'
    23:46:16.502 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2305/teams/import-from-list
    23:46:16.507 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2305
    23:46:16.512 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, The exercise must be a team-based exercise.
    23:46:16.512 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: The exercise must be a team-based exercise.
    23:46:16.518 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2305/teams/import-from-list
    23:46:16.519 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2305
    23:46:16.529 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, Users with logins or registration numbers could not be found.
    23:46:16.529 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: Users with logins or registration numbers could not be found.
    23:46:16.535 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2305/teams/import-from-list
    23:46:16.536 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2305
    23:46:16.542 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, Users with logins or registration numbers could not be found.
    23:46:16.542 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: Users with logins or registration numbers could not be found.
    23:46:16.548 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2305/teams/import-from-list
    23:46:16.549 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2305
    23:46:16.554 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, Students do not have an identifier
    23:46:16.554 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: Students do not have an identifier
    23:46:16.555 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2305/teams/import-from-list
    23:46:16.556 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2305
    23:46:16.565 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, Students appear multiple times in team import request.
    23:46:16.565 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: Students appear multiple times in team import request.

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListIntoExerciseWithStudentConflictsUsingCreateOnlyStrategy()
    23:46:16.597 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:16.598 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:16.606 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:16.608 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:16.613 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:16.621 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 12 users from all courses...
    23:46:16.622 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 12 users from all courses. Done
    23:46:16.622 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:16.632 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:16.736 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListIntoExerciseWithStudentConflictsUsingCreateOnlyStrategy'
    23:46:16.776 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2307/teams/import-from-list
    23:46:16.777 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2307

  Starting logs for TeamImportIntegrationTest > testImportFromListIntoExerciseWithTeamShortNameConflictsUsingCreateOnlyStrategy()
    23:46:16.837 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:16.838 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:16.841 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:16.843 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:16.845 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:16.847 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 20 users from all courses...
    23:46:16.849 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 20 users from all courses. Done
    23:46:16.849 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:16.852 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:16.943 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportFromListIntoExerciseWithTeamShortNameConflictsUsingCreateOnlyStrategy'
    23:46:17.076 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2309/teams/import-from-list
    23:46:17.077 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2309

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseBadRequests()
    23:46:17.117 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:17.118 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:17.122 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:17.124 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:17.126 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:17.129 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 29 users from all courses...
    23:46:17.133 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 29 users from all courses. Done
    23:46:17.133 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:17.135 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:17.188 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseBadRequests'
    23:46:17.189 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2311/teams/import-from-exercise/2311
    23:46:17.190 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2311 into destination exercise with id 2311
    23:46:17.192 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, The source and destination exercise must be different.
    23:46:17.192 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: The source and destination exercise must be different.
    23:46:17.195 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2311/teams/import-from-exercise/2310
    23:46:17.195 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2310 into destination exercise with id 2311
    23:46:17.197 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, The destination exercise must be a team-based exercise.
    23:46:17.197 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: The destination exercise must be a team-based exercise.
    23:46:17.201 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2311/teams/import-from-exercise/2310
    23:46:17.201 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2310 into destination exercise with id 2311
    23:46:17.204 | 392 ool-1-worker-156 | ERROR | tech.jhipster.web.util.HeaderUtil    : Entity processing failed, The source exercise must be a team-based exercise.
    23:46:17.204 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Bad Request: The source exercise must be a team-based exercise.

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoEmptyExercise(TeamImportStrategyType) [1] importStrategyType=PURGE_EXISTING
    23:46:17.218 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:17.220 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:17.223 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:17.224 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:17.227 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:17.229 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:17.230 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:17.230 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:17.233 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:17.334 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoEmptyExercise'
    23:46:17.424 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2313/teams/import-from-exercise/2312
    23:46:17.424 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2312 into destination exercise with id 2313
    23:46:17.435 | 392 ool-1-worker-156 | INFO  | d.t.c.a.a.e.s.ParticipationService   : Request to delete all 0 participations of exercise with id : 2313

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoEmptyExercise(TeamImportStrategyType) [2] importStrategyType=CREATE_ONLY
    23:46:17.482 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:17.483 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:17.489 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:17.493 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:17.499 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:17.502 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 20 users from all courses...
    23:46:17.507 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 20 users from all courses. Done
    23:46:17.507 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:17.514 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:17.568 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoEmptyExercise'
    23:46:17.610 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2315/teams/import-from-exercise/2314
    23:46:17.610 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2314 into destination exercise with id 2315

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoExerciseWithNoConflictsUsingCreateOnlyStrategy()
    23:46:17.638 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:17.639 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:17.642 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:17.644 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:17.646 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:17.649 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 20 users from all courses...
    23:46:17.652 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 20 users from all courses. Done
    23:46:17.652 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:17.654 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:17.723 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoExerciseWithNoConflictsUsingCreateOnlyStrategy'
    23:46:17.817 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2317/teams/import-from-exercise/2316
    23:46:17.817 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2316 into destination exercise with id 2317

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListForbiddenAsTutor()
    23:46:17.861 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:17.864 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:17.871 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:17.872 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:17.876 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:17.884 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 22 users from all courses...
    23:46:17.888 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 22 users from all courses. Done
    23:46:17.888 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:17.894 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:18.005 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListForbiddenAsTutor'
    23:46:18.006 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2319/teams/import-from-list
    23:46:18.010 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Forbidden: Access Denied

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoExerciseWithNoConflictsUsingPurgeExistingStrategy()
    23:46:18.036 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:18.041 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:18.048 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:18.049 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:18.058 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:18.063 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:18.066 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:18.066 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:18.074 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:18.205 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoExerciseWithNoConflictsUsingPurgeExistingStrategy'
    23:46:18.393 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2321/teams/import-from-exercise/2320
    23:46:18.394 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2320 into destination exercise with id 2321
    23:46:18.406 | 392 ool-1-worker-156 | INFO  | d.t.c.a.a.e.s.ParticipationService   : Request to delete all 0 participations of exercise with id : 2321

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseForbiddenAsTutor()
    23:46:18.467 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:18.468 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:18.475 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:18.479 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:18.482 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:18.491 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 26 users from all courses...
    23:46:18.495 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 26 users from all courses. Done
    23:46:18.495 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:18.502 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:18.611 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseForbiddenAsTutor'
    23:46:18.615 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2323/teams/import-from-exercise/2322
    23:46:18.616 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Forbidden: Access Denied

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListIntoExerciseWithNoConflictsUsingCreateOnlyStrategy()
    23:46:18.642 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:18.646 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:18.652 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:18.654 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:18.661 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:18.665 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:18.669 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:18.669 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:18.674 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:18.804 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListIntoExerciseWithNoConflictsUsingCreateOnlyStrategy'
    23:46:18.840 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2325/teams/import-from-list
    23:46:18.841 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2325

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoExerciseWithConflictsUsingPurgeExistingStrategy()
    23:46:18.938 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:18.939 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:18.948 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:18.955 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:18.959 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:18.961 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 13 users from all courses...
    23:46:18.962 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 13 users from all courses. Done
    23:46:18.963 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:18.965 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:19.075 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoExerciseWithConflictsUsingPurgeExistingStrategy'
    23:46:19.213 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2327/teams/import-from-exercise/2326
    23:46:19.213 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2326 into destination exercise with id 2327
    23:46:19.218 | 392 ool-1-worker-156 | INFO  | d.t.c.a.a.e.s.ParticipationService   : Request to delete all 0 participations of exercise with id : 2327

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListForbiddenAsInstructorOfOtherCourse()
    23:46:19.245 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:19.247 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:19.250 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:19.252 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:19.255 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:19.258 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 25 users from all courses...
    23:46:19.261 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 25 users from all courses. Done
    23:46:19.261 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:19.264 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:19.352 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListForbiddenAsInstructorOfOtherCourse'
    23:46:19.362 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2329/teams/import-from-list
    23:46:19.363 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2329
    23:46:19.367 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Forbidden: You are not allowed to access the Course with id 1864

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoExerciseWithTeamShortNameConflictsUsingCreateOnlyStrategy()
    23:46:19.396 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:19.398 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:19.403 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:19.408 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:19.416 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:19.422 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:19.424 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:19.424 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:19.431 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:19.631 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoExerciseWithTeamShortNameConflictsUsingCreateOnlyStrategy'
    23:46:19.739 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2331/teams/import-from-exercise/2330
    23:46:19.739 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2330 into destination exercise with id 2331

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseIntoExerciseWithStudentConflictsUsingCreateOnlyStrategy()
    23:46:19.800 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:19.807 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:19.810 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:19.812 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:19.816 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:19.823 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 27 users from all courses...
    23:46:19.831 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 27 users from all courses. Done
    23:46:19.831 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:19.834 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:19.921 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseIntoExerciseWithStudentConflictsUsingCreateOnlyStrategy'
    23:46:20.028 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2333/teams/import-from-exercise/2332
    23:46:20.030 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2332 into destination exercise with id 2333

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromExerciseForbiddenAsInstructorOfOtherCourse()
    23:46:20.072 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:20.074 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:20.077 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:20.079 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:20.081 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:20.084 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 22 users from all courses...
    23:46:20.087 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 22 users from all courses. Done
    23:46:20.087 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:20.092 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:20.206 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromExerciseForbiddenAsInstructorOfOtherCourse'
    23:46:20.218 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2335/teams/import-from-exercise/2334
    23:46:20.218 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import all teams from source exercise with id 2334 into destination exercise with id 2335
    23:46:20.221 | 392 ool-1-worker-156 | WARN  | o.z.p.spring.common.AdviceTraits     : Forbidden: You are not allowed to access the Course with id 1867

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListIntoEmptyExercise(TeamImportStrategyType) [1] importStrategyType=PURGE_EXISTING
    23:46:20.240 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:20.241 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:20.245 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:20.247 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:20.250 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:20.253 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:20.254 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:20.254 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:20.259 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:20.399 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListIntoEmptyExercise'
    23:46:20.400 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2337/teams/import-from-list
    23:46:20.402 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2337
    23:46:20.414 | 392 ool-1-worker-156 | INFO  | d.t.c.a.a.e.s.ParticipationService   : Request to delete all 0 participations of exercise with id : 2337

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListIntoEmptyExercise(TeamImportStrategyType) [2] importStrategyType=CREATE_ONLY
    23:46:20.477 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:20.481 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:20.493 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:20.505 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:20.509 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:20.511 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:20.520 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:20.520 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:20.530 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:20.697 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListIntoEmptyExercise'
    23:46:20.702 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2339/teams/import-from-list
    23:46:20.703 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2339

  Starting logs for TeamImportIntegrationTest > testImportTeamsFromListWithNoConflictsUsingPurgeExistingStrategy()
    23:46:20.768 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:20.774 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:20.780 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:20.785 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:20.791 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:20.793 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses...
    23:46:20.797 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 11 users from all courses. Done
    23:46:20.797 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:20.804 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:20.923 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportTeamsFromListWithNoConflictsUsingPurgeExistingStrategy'
    23:46:21.033 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2341/teams/import-from-list
    23:46:21.034 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2341
    23:46:21.046 | 392 ool-1-worker-156 | INFO  | d.t.c.a.a.e.s.ParticipationService   : Request to delete all 0 participations of exercise with id : 2341

  Starting logs for TeamImportIntegrationTest > testImportFromListIntoExerciseWithConflictsUsingPurgeExistingStrategy()
    23:46:21.113 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Generate 0 students...
    23:46:21.114 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 students generated. Generate 1 tutors...
    23:46:21.125 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 tutors generated. Generate 0 editors...
    23:46:21.129 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 0 editors generated. Generate 1 instructors...
    23:46:21.132 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : 1 instructors generated
    23:46:21.138 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 21 users from all courses...
    23:46:21.142 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Removing 21 users from all courses. Done
    23:46:21.142 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database...
    23:46:21.149 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.u.util.UserUtilService   : Save 2 users to database. Done
    23:46:21.274 | 392 ool-1-worker-156 | INFO  | i.z.t.d.l.EmbeddedDatabaseReporter   : JDBC URL to connect to 'dataSource': url='jdbc:h2:tcp://localhost:41063/mem:df70fc46-7e57-4cb5-9cd0-c1d90c14afa7;USER=sa', scope='TeamImportIntegrationTest#testImportFromListIntoExerciseWithConflictsUsingPurgeExistingStrategy'
    23:46:21.424 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.c.s.f.ApiVersionFilter     : Adding Version to Request PUT /api/exercises/2343/teams/import-from-list
    23:46:21.425 | 392 ool-1-worker-156 | DEBUG | d.t.c.a.a.exercise.web.TeamResource  : REST request import given teams into destination exercise with id 2343
    23:46:21.437 | 392 ool-1-worker-156 | INFO  | d.t.c.a.a.e.s.ParticipationService   : Request to delete all 0 participations of exercise with id : 2343

Finished logs for TeamImportIntegrationTest

Starting logs for ObjectMethodTest

  Starting logs for ObjectMethodTest > testDomainClasses()
    23:46:19.186 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.quiz.domain.compare.DnDMapping does not have a no-args constructor
    23:46:19.186 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.quiz.domain.compare.SAMapping does not have a no-args constructor
    23:46:19.201 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.quiz.domain.QuizSubmittedAnswerCount does not have a no-args constructor
    23:46:19.824 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.exercise.domain.participation.IdToPresentationScoreSum does not have a no-args constructor
    23:46:19.869 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.exam.domain.SuspiciousSessionsAnalysisOptions does not have a no-args constructor
    23:46:19.870 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.exam.domain.SuspiciousExamSessions does not have a no-args constructor
    23:46:19.924 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.fileupload.domain.FilePathInformation does not have a no-args constructor
    23:46:19.989 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.core.domain.LLMRequest does not have a no-args constructor
    23:46:20.343 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.communication.domain.ConversationParticipantSettingsView does not have a no-args constructor
    23:46:20.343 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.communication.domain.CreatedConversationMessage does not have a no-args constructor
    23:46:20.344 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.communication.domain.ConversationNotificationRecipientSummary does not have a no-args constructor
    23:46:20.417 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.build.BuildLogStatisticsEntry$BuildJobPartDuration does not have a no-args constructor
    23:46:20.424 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.StaticCodeAnalysisDefaultCategory does not have a no-args constructor
    23:46:20.424 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.Commit does not have a no-args constructor
    23:46:20.425 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.StaticCodeAnalysisDefaultCategory$CategoryMapping does not have a no-args constructor
    23:46:20.425 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.Repository does not have a no-args constructor
    23:46:20.426 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.AuxiliaryRepository$AuxRepoNameWithUri does not have a no-args constructor
    23:46:20.426 |  27 nPool-1-worker-1 | WARN  | d.t.c.a.a.shared.ObjectMethodTest    : class de.tum.cit.aet.artemis.programming.domain.File does not have a no-args constructor

Finished logs for ObjectMethodTest
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
